-- MySQL Script generated by MySQL Workbench
-- sex 25 out 2024 03:31:06
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema lojavirtual_hybris
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema lojavirtual_hybris
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `lojavirtual_hybris` DEFAULT CHARACTER SET utf8 ;
USE `lojavirtual_hybris` ;

-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Ambiente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Ambiente` (
  `idAmbiente` INT NOT NULL,
  `fisico` TINYINT NULL,
  PRIMARY KEY (`idAmbiente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Loja`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Loja` (
  `idLoja` INT NOT NULL,
  `Ambiente: fisico ou virtual_idAmbiente: fisico ou virtual` INT NOT NULL,
  `endereco` VARCHAR(100) NULL,
  `nome` VARCHAR(45) NULL,
  PRIMARY KEY (`idLoja`),
  INDEX `fk_Loja_Ambiente_idx` (`Ambiente: fisico ou virtual_idAmbiente: fisico ou virtual` ASC) VISIBLE,
  CONSTRAINT `fk_Loja_Ambiente`
    FOREIGN KEY (`Ambiente: fisico ou virtual_idAmbiente: fisico ou virtual`)
    REFERENCES `lojavirtual_hybris`.`Ambiente` (`idAmbiente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Cliente` (
  `idCliente` INT NOT NULL,
  PRIMARY KEY (`idCliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Estoque` (
  `idEstoque` INT NOT NULL,
  `quantidade` INT NOT NULL,
  PRIMARY KEY (`idEstoque`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Fornecedor` (
  `idFornecedores` INT NOT NULL,
  `nome` VARCHAR(45) NULL,
  PRIMARY KEY (`idFornecedores`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`TipoProduto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`TipoProduto` (
  `idTipoProduto` INT NOT NULL,
  `fisico` TINYINT NULL,
  PRIMARY KEY (`idTipoProduto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Comissao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Comissao` (
  `idComissao` INT NOT NULL,
  PRIMARY KEY (`idComissao`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Vendedor` (
  `idVendedor` INT NOT NULL,
  PRIMARY KEY (`idVendedor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Parcelamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Parcelamento` (
  `idParcelamento` INT NOT NULL,
  PRIMARY KEY (`idParcelamento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Pagamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Pagamento` (
  `idPagamento` INT NOT NULL,
  `Parcelamento_idParcelamento` INT NOT NULL,
  `modo_pagamento` VARCHAR(45) NULL,
  PRIMARY KEY (`idPagamento`),
  INDEX `fk_Pagamento_Parcelamento1_idx` (`Parcelamento_idParcelamento` ASC) VISIBLE,
  CONSTRAINT `fk_Pagamento_Parcelamento1`
    FOREIGN KEY (`Parcelamento_idParcelamento`)
    REFERENCES `lojavirtual_hybris`.`Parcelamento` (`idParcelamento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Entrega` (
  `idEntrega` INT NOT NULL,
  PRIMARY KEY (`idEntrega`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Pedido` (
  `idPedido` INT NOT NULL,
  `Vendedor_idVendedor` INT NOT NULL,
  `Pagamento_idPagamento` INT NOT NULL,
  `Entrega_idEntrega` INT NOT NULL,
  PRIMARY KEY (`idPedido`),
  INDEX `fk_Venda_Vendedor1_idx` (`Vendedor_idVendedor` ASC) VISIBLE,
  INDEX `fk_Venda_Pagamento1_idx` (`Pagamento_idPagamento` ASC) VISIBLE,
  INDEX `fk_Venda_Entrega1_idx` (`Entrega_idEntrega` ASC) VISIBLE,
  CONSTRAINT `fk_Venda_Comissao1`
    FOREIGN KEY (`idPedido`)
    REFERENCES `lojavirtual_hybris`.`Comissao` (`idComissao`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venda_Vendedor1`
    FOREIGN KEY (`Vendedor_idVendedor`)
    REFERENCES `lojavirtual_hybris`.`Vendedor` (`idVendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venda_Cliente1`
    FOREIGN KEY (`idPedido`)
    REFERENCES `lojavirtual_hybris`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venda_Pagamento1`
    FOREIGN KEY (`Pagamento_idPagamento`)
    REFERENCES `lojavirtual_hybris`.`Pagamento` (`idPagamento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venda_Entrega1`
    FOREIGN KEY (`Entrega_idEntrega`)
    REFERENCES `lojavirtual_hybris`.`Entrega` (`idEntrega`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Produto` (
  `idProduto` INT NOT NULL,
  `TipoProduto_idTipoProduto` INT NOT NULL,
  `Estoque_idEstoque` INT NOT NULL,
  `Pedido_idPedido` INT NULL,
  `Fornecedor_idFornecedor` INT NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idProduto`),
  INDEX `fk_Produto_TipoProduto1_idx` (`TipoProduto_idTipoProduto` ASC) VISIBLE,
  INDEX `fk_Produto_Estoque1_idx` (`Estoque_idEstoque` ASC) VISIBLE,
  INDEX `fk_Produto_Pedido1_idx` (`Pedido_idPedido` ASC) VISIBLE,
  INDEX `fk_Produto_Fornecedor1_idx` (`Fornecedor_idFornecedor` ASC) VISIBLE,
  CONSTRAINT `fk_Produto_TipoProduto1`
    FOREIGN KEY (`TipoProduto_idTipoProduto`)
    REFERENCES `lojavirtual_hybris`.`TipoProduto` (`idTipoProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Estoque1`
    FOREIGN KEY (`Estoque_idEstoque`)
    REFERENCES `lojavirtual_hybris`.`Estoque` (`idEstoque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Pedido1`
    FOREIGN KEY (`Pedido_idPedido`)
    REFERENCES `lojavirtual_hybris`.`Pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Fornecedor1`
    FOREIGN KEY (`Fornecedor_idFornecedor`)
    REFERENCES `lojavirtual_hybris`.`Fornecedor` (`idFornecedores`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lojavirtual_hybris`.`Loja_Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lojavirtual_hybris`.`Loja_Fornecedor` (
  `Loja_idLoja` INT NULL,
  `Fornecedor_idFornecedor` INT NULL,
  INDEX `fk_Loja_Fornecedor_Fornecedor1_idx` (`Fornecedor_idFornecedor` ASC) VISIBLE,
  INDEX `fk_Loja_Fornecedor_Loja1_idx` (`Loja_idLoja` ASC) VISIBLE,
  CONSTRAINT `fk_Loja_Fornecedores_Loja1`
    FOREIGN KEY (`Loja_idLoja`)
    REFERENCES `lojavirtual_hybris`.`Loja` (`idLoja`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Loja_Fornecedores_Fornecedores1`
    FOREIGN KEY (`Fornecedor_idFornecedor`)
    REFERENCES `lojavirtual_hybris`.`Fornecedor` (`idFornecedores`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `lojavirtual_hybris`.`Ambiente`
-- -----------------------------------------------------
START TRANSACTION;
USE `lojavirtual_hybris`;
INSERT INTO `lojavirtual_hybris`.`Ambiente` (`idAmbiente`, `fisico`) VALUES (1, 0);
INSERT INTO `lojavirtual_hybris`.`Ambiente` (`idAmbiente`, `fisico`) VALUES (2, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `lojavirtual_hybris`.`Loja`
-- -----------------------------------------------------
START TRANSACTION;
USE `lojavirtual_hybris`;
INSERT INTO `lojavirtual_hybris`.`Loja` (`idLoja`, `Ambiente: fisico ou virtual_idAmbiente: fisico ou virtual`, `endereco`, `nome`) VALUES (1, 1, 'Endereço teste 1', 'Loja fisica');
INSERT INTO `lojavirtual_hybris`.`Loja` (`idLoja`, `Ambiente: fisico ou virtual_idAmbiente: fisico ou virtual`, `endereco`, `nome`) VALUES (2, 2, 'Endereço teste 2', 'Loja virtual');

COMMIT;


-- -----------------------------------------------------
-- Data for table `lojavirtual_hybris`.`Estoque`
-- -----------------------------------------------------
START TRANSACTION;
USE `lojavirtual_hybris`;
INSERT INTO `lojavirtual_hybris`.`Estoque` (`idEstoque`, `quantidade`) VALUES (1, 100);

COMMIT;


-- -----------------------------------------------------
-- Data for table `lojavirtual_hybris`.`Fornecedor`
-- -----------------------------------------------------
START TRANSACTION;
USE `lojavirtual_hybris`;
INSERT INTO `lojavirtual_hybris`.`Fornecedor` (`idFornecedores`, `nome`) VALUES (1, 'Fornecedor 1');

COMMIT;


-- -----------------------------------------------------
-- Data for table `lojavirtual_hybris`.`TipoProduto`
-- -----------------------------------------------------
START TRANSACTION;
USE `lojavirtual_hybris`;
INSERT INTO `lojavirtual_hybris`.`TipoProduto` (`idTipoProduto`, `fisico`) VALUES (1, 0);
INSERT INTO `lojavirtual_hybris`.`TipoProduto` (`idTipoProduto`, `fisico`) VALUES (2, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `lojavirtual_hybris`.`Produto`
-- -----------------------------------------------------
START TRANSACTION;
USE `lojavirtual_hybris`;
INSERT INTO `lojavirtual_hybris`.`Produto` (`idProduto`, `TipoProduto_idTipoProduto`, `Estoque_idEstoque`, `Pedido_idPedido`, `Fornecedor_idFornecedor`, `nome`) VALUES (123, 1, 1, NULL, 1, 'Produto 1');

COMMIT;

DESCRIBE lojavirtual_hybris.fornecedor;


-- -----------------------------------------------------
# Query para inserir 5 dados
-- -----------------------------------------------------
INSERT INTO lojavirtual_hybris.fornecedor (idFornecedores, nome) VALUES ('2', 'Fornecedor A');
INSERT INTO lojavirtual_hybris.fornecedor (idFornecedores, nome) VALUES ('3', 'Fornecedor B');
INSERT INTO lojavirtual_hybris.fornecedor (idFornecedores, nome) VALUES ('4', 'Fornecedor C');
INSERT INTO lojavirtual_hybris.fornecedor (idFornecedores, nome) VALUES ('5', 'Fornecedor D');
INSERT INTO lojavirtual_hybris.fornecedor (idFornecedores, nome) VALUES ('6', 'Fornecedor E');

INSERT INTO lojavirtual_hybris.Estoque (idEstoque, quantidade) VALUES ('2', '100');
INSERT INTO lojavirtual_hybris.Estoque (idEstoque, quantidade) VALUES ('3', '150');
INSERT INTO lojavirtual_hybris.Estoque (idEstoque, quantidade) VALUES ('4', '200');
INSERT INTO lojavirtual_hybris.Estoque (idEstoque, quantidade) VALUES ('5', '50');
INSERT INTO lojavirtual_hybris.Estoque (idEstoque, quantidade) VALUES ('6', '300');

INSERT INTO lojavirtual_hybris.TipoProduto (idTipoProduto, fisico) VALUES ('1', '0');
INSERT INTO lojavirtual_hybris.TipoProduto (idTipoProduto, fisico) VALUES ('2', '1');
INSERT INTO lojavirtual_hybris.TipoProduto (idTipoProduto, fisico) VALUES ('3', '1');
INSERT INTO lojavirtual_hybris.TipoProduto (idTipoProduto, fisico) VALUES ('4', '0');
INSERT INTO lojavirtual_hybris.TipoProduto (idTipoProduto, fisico) VALUES ('5', '1');

INSERT INTO lojavirtual_hybris.Produto (idProduto, nome, Fornecedor_idFornecedor, Estoque_idEstoque, TipoProduto_idTipoProduto) VALUES ('1', 'Produto A', '1', '1', '1');
INSERT INTO lojavirtual_hybris.Produto (idProduto, nome, Fornecedor_idFornecedor, Estoque_idEstoque, TipoProduto_idTipoProduto) VALUES ('2', 'Produto B', '2', '2', '2');
INSERT INTO lojavirtual_hybris.Produto (idProduto, nome, Fornecedor_idFornecedor, Estoque_idEstoque, TipoProduto_idTipoProduto) VALUES ('3', 'Produto C', '3', '3', '3');
INSERT INTO lojavirtual_hybris.Produto (idProduto, nome, Fornecedor_idFornecedor, Estoque_idEstoque, TipoProduto_idTipoProduto) VALUES ('4', 'Produto D', '4', '4', '4');
INSERT INTO lojavirtual_hybris.Produto (idProduto, nome, Fornecedor_idFornecedor, Estoque_idEstoque, TipoProduto_idTipoProduto) VALUES ('5', 'Produto E', '5', '5', '5');

-- -----------------------------------------------------
# Query dos 3 primeiros produtos
-- -----------------------------------------------------
SELECT * FROM lojavirtual_hybris.Produto ORDER BY idProduto LIMIT 3;

-- -----------------------------------------------------
# Query para selecionar os produtos com mais estoque
-- -----------------------------------------------------
SELECT * FROM lojavirtual_hybris.Produto ORDER BY Estoque_idEstoque DESC LIMIT 1;

-- -----------------------------------------------------
# para selecionar todos os produtos do fornecedor 2
-- -----------------------------------------------------
SELECT * FROM lojavirtual_hybris.Produto WHERE Fornecedor_idFornecedor = 2;

-- -----------------------------------------------------
# para deletar os produtos do fornecedor 3, que possuam algum nome especifico
-- -----------------------------------------------------
DELETE FROM lojavirtual_hybris.Produto WHERE Fornecedor_idFornecedor = 3 AND nome = 'Produto E';